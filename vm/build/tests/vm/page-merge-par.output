Kernel command line: -q -f put page-merge-par put child-sort run page-merge-par
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  156,876,800 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 218 sector (109 kB) disk, model "QEMU HARDDISK", serial "QM00003"
hd1:1: detected 8,064 sector (3 MB) disk, model "QEMU HARDDISK", serial "QM00004"
Formatting file system...done.
Boot complete.
Putting 'page-merge-par' into the file system...
Putting 'child-sort' into the file system...
Executing 'page-merge-par':
(page-merge-par) begin
(page-merge-par) init
(page-merge-par) sort chunk 0
(page-merge-par) open "buf0"
(page-merge-par) exec "child-sort buf0"
(page-merge-par) sort chunk 1
(page-merge-par) open "buf1"
child-sort: exit(123)
(page-merge-par) exec "child-sort buf1"
(page-merge-par) sort chunk 2
(page-merge-par) open "buf2"
child-sort: exit(123)
(page-merge-par) sort chunk 3
(page-merge-par) exec "child-sort buf2"
(page-merge-par) open "buf3"
child-sort: exit(123)
(page-merge-par) exec "child-sort buf3"
(page-merge-par) sort chunk 4
(page-merge-par) open "buf4"
child-sort: exit(123)
(page-merge-par) sort chunk 5
(page-merge-par) exec "child-sort buf4"
(page-merge-par) open "buf5"
child-sort: exit(123)
(page-merge-par) exec "child-sort buf5"
(page-merge-par) sort chunk 6
(page-merge-par) open "buf6"
child-sort: exit(123)
(page-merge-par) sort chunk 7
(page-merge-par) exec "child-sort buf6"
(page-merge-par) open "buf7"
child-sort: exit(123)
(page-merge-par) exec "child-sort buf7"
(page-merge-par) wait for child 0
(page-merge-par) wait for child 1
(page-merge-par) open "buf1": FAILED
page-merge-par: exit(1)
Interrupt 0x0d (#GP General Protection Exception) at rip=800421700b
 cr2=0000000000625000 error=               0
rax cccccccccccccccc rbx 0000000000000000 rcx 0000008004243028 rdx 0000008004243028
rsp 0000008004243b50 rbp 0000008004243b60 rsi 0000008004243028 rdi 000000800427c028
rip 000000800421700b r8 0000008004243e08  r9 0000008004219e99 r10 0000000000000000
r11 0000000000000206 r12 000000800421bd63 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000006
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:98 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x8004216a57 0x800421bb0b 0x8004209094 0x80042094b2 0x8004217e24 0x80042076bf 0x80042091eb 0x80042094b2 0x8004208207 0x800420a110 0x800420a5d1 0x800420c036 0x80042201db 0x80042205ea 0x800421901d 0x80042190a0 0x800422061e 0x800421a958 0x800421a924 0x80042072d4 0x800421c4dd 0x800421bde8 0x800421bc8c 0x400c72 0x400528 0x4007ea 0x400107 0x4014f7 0x401540.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 339 ticks
Thread: 30 idle ticks, 76 kernel ticks, 233 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 2709 reads, 6458 writes
hd1:0: 218 reads, 0 writes
hd1:1: 0 reads, 0 writes
Console: 3208 characters output
Key